/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const GetThemeFromGitee = (repository, pluname, fileName) => __awaiter(void 0, void 0, void 0, function* () {
    const URL = `${repository}/raw/master/${pluname}/${fileName}`;
    console.log('url-->', URL);
    try {
        const download = yield obsidian.request({ url: URL });
        return ((download === "Not Found" || download === `{"error":"Not Found"}`) ? null : download);
    }
    catch (error) {
        console.log("error in grabReleaseFileFromRepository", URL, error);
    }
});
const GetFileFromGitee = (repository, pluname, version, fileName) => __awaiter(void 0, void 0, void 0, function* () {
    const URL = `${repository}/raw/master/${pluname}/${version}/${fileName}`;
    console.log('url-->', URL);
    try {
        const download = yield obsidian.request({ url: URL });
        return ((download === "Not Found" || download === `{"error":"Not Found"}`) ? null : download);
    }
    catch (error) {
        console.log("error in grabReleaseFileFromRepository", URL, error);
    }
});
// export const grabCommmunityPluginList = async(): Promise<JSON> => {   
//     // const pluginListURL = `https://raw.githubusercontent.com/obsidianmd/obsidian-releases/HEAD/community-plugins.json`;
//     const pluginListURL = `https://hub.fastgit.org/obsidianmd/obsidian-releases/HEAD/community-plugins.json`;
//     try {
//         const response = await request({ url: pluginListURL });
//         // console.log("github", response)
//         return (response === "404: Not Found" ? null : await JSON.parse(response));
//     } catch (error) {
//         console.log("error in grabCommmunityPluginList", error)
//     }
// }
const GetGiteePluginList = () => __awaiter(void 0, void 0, void 0, function* () {
    const pluginListURL = "https://gitee.com/whghcyx/obsidian-download-manage/raw/master/plugin/plugin_download_url.json";
    try {
        const response = yield obsidian.request({ url: pluginListURL });
        // console.log("gitee", response)
        return (response === "404: Not Found" ? null : yield JSON.parse(response));
    }
    catch (error) {
        console.log("error in grabCommmunityPluginList", error);
    }
});
const GetGiteeThemeList = () => __awaiter(void 0, void 0, void 0, function* () {
    const pluginListURL = "https://gitee.com/whghcyx/obsidian-download-manage/raw/master/theme/theme_download_url.json";
    try {
        const response = yield obsidian.request({ url: pluginListURL });
        // console.log("gitee", response)
        return (response === "404: Not Found" ? null : yield JSON.parse(response));
    }
    catch (error) {
        console.log("error in grabCommmunityPluginList", error);
    }
});
const GetGiteeSnippetList = () => __awaiter(void 0, void 0, void 0, function* () {
    const pluginListURL = "https://gitee.com/whghcyx/obsidian-download-manage/raw/master/snippet/snippet_download_url.json";
    try {
        const response = yield obsidian.request({ url: pluginListURL });
        // console.log("gitee", response)
        return (response === "404: Not Found" ? null : yield JSON.parse(response));
    }
    catch (error) {
        console.log("error in grabCommmunityPluginList", error);
    }
});
const GetGiteePluginHistory = () => __awaiter(void 0, void 0, void 0, function* () {
    const pluginListURL = "https://gitee.com/whghcyx/obsidian-download-manage/raw/master/plugin/plugin_history_version.json";
    try {
        const response = yield obsidian.request({ url: pluginListURL });
        // console.log("gitee", response)
        return (response === "404: Not Found" ? null : yield JSON.parse(response));
    }
    catch (error) {
        console.log("error in grabCommmunityPluginList", error);
    }
});

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
    if (!src_url_equal_anchor) {
        src_url_equal_anchor = document.createElement('a');
    }
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && root.host) {
        return root;
    }
    return node.ownerDocument;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function select_option(select, value) {
    for (let i = 0; i < select.options.length; i += 1) {
        const option = select.options[i];
        if (option.__value === value) {
            option.selected = true;
            return;
        }
    }
    select.selectedIndex = -1; // no option should be selected
}
function select_value(select) {
    const selected_option = select.querySelector(':checked') || select.options[0];
    return selected_option && selected_option.__value;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src\ui\PluShow.svelte generated by Svelte v3.42.4 */

function add_css$2(target) {
	append_styles(target, "svelte-14mf2xp", ".community-plugin-item.svelte-14mf2xp{margin:15px 0;padding:10px 20px 15px 20px;cursor:pointer}.community-plugin-search-results.svelte-14mf2xp{overflow:scroll}.community-plugin-search-summary.svelte-14mf2xp{font-size:15px;padding:0 20px 6px 20px}.community-plugin.svelte-14mf2xp{margin:0;height:100%}.community-plugin-search.svelte-14mf2xp{flex:3 0 100px;flex-grow:3;flex-shrink:0;flex-basis:100px;background-color:var(--background-secondary-alt);padding:40px 0 0 0;display:flex;flex-direction:column}.community-plugin-details.svelte-14mf2xp{flex:10 0 0;overflow:scroll;display:flex;flex-direction:column}");
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_1$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	child_ctx[22] = i;
	return child_ctx;
}

function get_each_context_2$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

// (149:16) {:else}
function create_else_block_2(ctx) {
	let div4;
	let div0;
	let t0_value = /*plugin_info*/ ctx[23]['name'] + "";
	let t0;
	let t1;
	let t2;
	let div1;
	let t3_value = /*pluhistory*/ ctx[2][/*plugin_info*/ ctx[23]['id']]['downloads'] + "";
	let t3;
	let t4;
	let div2;
	let t5;
	let t6_value = /*plugin_info*/ ctx[23]['author'] + "";
	let t6;
	let t7;
	let div3;
	let t8_value = /*plugin_info*/ ctx[23]['description'] + "";
	let t8;
	let t9;
	let mounted;
	let dispose;
	let each_value_4 = /*nowpluinfo*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	return {
		c() {
			div4 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div1 = element("div");
			t3 = text(t3_value);
			t4 = space();
			div2 = element("div");
			t5 = text("作者：");
			t6 = text(t6_value);
			t7 = space();
			div3 = element("div");
			t8 = text(t8_value);
			t9 = space();
			attr(div0, "class", "community-plugin-name");
			attr(div4, "class", "community-plugin-item svelte-14mf2xp");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div0);
			append(div0, t0);
			append(div0, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div4, t2);
			append(div4, div1);
			append(div1, t3);
			append(div4, t4);
			append(div4, div2);
			append(div2, t5);
			append(div2, t6);
			append(div4, t7);
			append(div4, div3);
			append(div3, t8);
			append(div4, t9);

			if (!mounted) {
				dispose = listen(div4, "click", function () {
					if (is_function(/*changeText*/ ctx[7](/*plugin_info*/ ctx[23]))) /*changeText*/ ctx[7](/*plugin_info*/ ctx[23]).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*plulist*/ 2 && t0_value !== (t0_value = /*plugin_info*/ ctx[23]['name'] + "")) set_data(t0, t0_value);

			if (dirty & /*nowpluinfo, plulist*/ 3) {
				each_value_4 = /*nowpluinfo*/ ctx[0];
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_4.length;
			}

			if (dirty & /*pluhistory, plulist*/ 6 && t3_value !== (t3_value = /*pluhistory*/ ctx[2][/*plugin_info*/ ctx[23]['id']]['downloads'] + "")) set_data(t3, t3_value);
			if (dirty & /*plulist*/ 2 && t6_value !== (t6_value = /*plugin_info*/ ctx[23]['author'] + "")) set_data(t6, t6_value);
			if (dirty & /*plulist*/ 2 && t8_value !== (t8_value = /*plugin_info*/ ctx[23]['description'] + "")) set_data(t8, t8_value);
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (131:16) {#if pluname}
function create_if_block_4(ctx) {
	let show_if = /*plugin_info*/ ctx[23]['name'].includes(/*pluname*/ ctx[6]);
	let if_block_anchor;
	let if_block = show_if && create_if_block_5(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*plulist, pluname*/ 66) show_if = /*plugin_info*/ ctx[23]['name'].includes(/*pluname*/ ctx[6]);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_5(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (155:32) {#if nowplu['id'].includes(plugin_info['id'])}
function create_if_block_7(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "已安装";
			set_style(span, "color", "aqua");
			set_style(span, "background", "gold");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (154:28) {#each nowpluinfo as nowplu}
function create_each_block_4(ctx) {
	let show_if = /*nowplu*/ ctx[17]['id'].includes(/*plugin_info*/ ctx[23]['id']);
	let if_block_anchor;
	let if_block = show_if && create_if_block_7();

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*nowpluinfo, plulist*/ 3) show_if = /*nowplu*/ ctx[17]['id'].includes(/*plugin_info*/ ctx[23]['id']);

			if (show_if) {
				if (if_block) ; else {
					if_block = create_if_block_7();
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (132:20) {#if plugin_info['name'].includes(pluname)}
function create_if_block_5(ctx) {
	let div4;
	let div0;
	let t0_value = /*plugin_info*/ ctx[23]['name'] + "";
	let t0;
	let t1;
	let t2;
	let div1;
	let t3_value = /*pluhistory*/ ctx[2][/*plugin_info*/ ctx[23]['id']]['downloads'] + "";
	let t3;
	let t4;
	let div2;
	let t5;
	let t6_value = /*plugin_info*/ ctx[23]['author'] + "";
	let t6;
	let t7;
	let div3;
	let t8_value = /*plugin_info*/ ctx[23]['description'] + "";
	let t8;
	let t9;
	let mounted;
	let dispose;
	let each_value_3 = /*nowpluinfo*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	return {
		c() {
			div4 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div1 = element("div");
			t3 = text(t3_value);
			t4 = space();
			div2 = element("div");
			t5 = text("作者：");
			t6 = text(t6_value);
			t7 = space();
			div3 = element("div");
			t8 = text(t8_value);
			t9 = space();
			attr(div0, "class", "community-plugin-name");
			attr(div4, "class", "community-plugin-item svelte-14mf2xp");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div0);
			append(div0, t0);
			append(div0, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div4, t2);
			append(div4, div1);
			append(div1, t3);
			append(div4, t4);
			append(div4, div2);
			append(div2, t5);
			append(div2, t6);
			append(div4, t7);
			append(div4, div3);
			append(div3, t8);
			append(div4, t9);

			if (!mounted) {
				dispose = listen(div4, "click", function () {
					if (is_function(/*changeText*/ ctx[7](/*plugin_info*/ ctx[23]))) /*changeText*/ ctx[7](/*plugin_info*/ ctx[23]).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*plulist*/ 2 && t0_value !== (t0_value = /*plugin_info*/ ctx[23]['name'] + "")) set_data(t0, t0_value);

			if (dirty & /*nowpluinfo, plulist*/ 3) {
				each_value_3 = /*nowpluinfo*/ ctx[0];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}

			if (dirty & /*pluhistory, plulist*/ 6 && t3_value !== (t3_value = /*pluhistory*/ ctx[2][/*plugin_info*/ ctx[23]['id']]['downloads'] + "")) set_data(t3, t3_value);
			if (dirty & /*plulist*/ 2 && t6_value !== (t6_value = /*plugin_info*/ ctx[23]['author'] + "")) set_data(t6, t6_value);
			if (dirty & /*plulist*/ 2 && t8_value !== (t8_value = /*plugin_info*/ ctx[23]['description'] + "")) set_data(t8, t8_value);
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (138:36) {#if nowplu['id'].includes(plugin_info['id'])}
function create_if_block_6(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "已安装";
			set_style(span, "color", "aqua");
			set_style(span, "background", "gold");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (137:32) {#each nowpluinfo as nowplu}
function create_each_block_3(ctx) {
	let show_if = /*nowplu*/ ctx[17]['id'].includes(/*plugin_info*/ ctx[23]['id']);
	let if_block_anchor;
	let if_block = show_if && create_if_block_6();

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*nowpluinfo, plulist*/ 3) show_if = /*nowplu*/ ctx[17]['id'].includes(/*plugin_info*/ ctx[23]['id']);

			if (show_if) {
				if (if_block) ; else {
					if_block = create_if_block_6();
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (129:12) {#each plulist as plugin_info}
function create_each_block_2$1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*pluname*/ ctx[6]) return create_if_block_4;
		return create_else_block_2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (223:8) {:else}
function create_else_block_1(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "选择一个插件进行查看与安装";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (181:8) {#if nowplugin}
function create_if_block$1(ctx) {
	let h2;
	let t0_value = /*nowplugin*/ ctx[3]['name'] + "";
	let t0;
	let t1;
	let div0;
	let t2;
	let t3_value = /*nowplugin*/ ctx[3]['author'] + "";
	let t3;
	let t4;
	let div1;
	let t5_value = /*nowplugin*/ ctx[3]['description'] + "";
	let t5;
	let t6;
	let div2;
	let select;
	let t7;
	let span;
	let t8;
	let div3;
	let button0;
	let t10;
	let button1;
	let mounted;
	let dispose;
	let each_value_1 = /*nowpluhis*/ ctx[4];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
	}

	let each_value = /*nowpluinfo*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	return {
		c() {
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			div0 = element("div");
			t2 = text("作者：");
			t3 = text(t3_value);
			t4 = space();
			div1 = element("div");
			t5 = text(t5_value);
			t6 = space();
			div2 = element("div");
			select = element("select");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t7 = space();
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t8 = space();
			div3 = element("div");
			button0 = element("button");
			button0.textContent = "安装";
			t10 = space();
			button1 = element("button");
			button1.textContent = "卸载";
			attr(select, "name", "version");
			if (/*selectedIndex*/ ctx[5] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[13].call(select));
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t0);
			insert(target, t1, anchor);
			insert(target, div0, anchor);
			append(div0, t2);
			append(div0, t3);
			insert(target, t4, anchor);
			insert(target, div1, anchor);
			append(div1, t5);
			insert(target, t6, anchor);
			insert(target, div2, anchor);
			append(div2, select);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select, null);
			}

			select_option(select, /*selectedIndex*/ ctx[5]);
			append(div2, t7);
			append(div2, span);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}

			insert(target, t8, anchor);
			insert(target, div3, anchor);
			append(div3, button0);
			append(div3, t10);
			append(div3, button1);

			if (!mounted) {
				dispose = [
					listen(select, "change", /*select_change_handler*/ ctx[13]),
					listen(select, "change", remindMeLater),
					listen(button0, "click", /*install_plugin*/ ctx[8]),
					listen(button1, "click", /*delete_plugin*/ ctx[9])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*nowplugin*/ 8 && t0_value !== (t0_value = /*nowplugin*/ ctx[3]['name'] + "")) set_data(t0, t0_value);
			if (dirty & /*nowplugin*/ 8 && t3_value !== (t3_value = /*nowplugin*/ ctx[3]['author'] + "")) set_data(t3, t3_value);
			if (dirty & /*nowplugin*/ 8 && t5_value !== (t5_value = /*nowplugin*/ ctx[3]['description'] + "")) set_data(t5, t5_value);

			if (dirty & /*nowpluhis, Number, selectedIndex*/ 48) {
				each_value_1 = /*nowpluhis*/ ctx[4];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1$2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*selectedIndex*/ 32) {
				select_option(select, /*selectedIndex*/ ctx[5]);
			}

			if (dirty & /*nowpluinfo, nowplugin*/ 9) {
				each_value = /*nowpluinfo*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(h2);
			if (detaching) detach(t1);
			if (detaching) detach(div0);
			if (detaching) detach(t4);
			if (detaching) detach(div1);
			if (detaching) detach(t6);
			if (detaching) detach(div2);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t8);
			if (detaching) detach(div3);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (196:24) {#if li != 'downloads'}
function create_if_block_2(ctx) {
	let show_if;
	let if_block_anchor;

	function select_block_type_2(ctx, dirty) {
		if (show_if == null || dirty & /*selectedIndex*/ 32) show_if = !!(Number(/*i*/ ctx[22]) == Number(/*selectedIndex*/ ctx[5]));
		if (show_if) return create_if_block_3;
		return create_else_block;
	}

	let current_block_type = select_block_type_2(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_2(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (199:28) {:else}
function create_else_block(ctx) {
	let option;
	let t_value = /*li*/ ctx[20] + "";
	let t;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = /*i*/ ctx[22];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty & /*nowpluhis*/ 16 && t_value !== (t_value = /*li*/ ctx[20] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (197:28) {#if Number(i) == Number(selectedIndex)}
function create_if_block_3(ctx) {
	let option;
	let t_value = /*li*/ ctx[20] + "";
	let t;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			set_style(option, "background-color", "cyan");
			option.__value = /*i*/ ctx[22];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty & /*nowpluhis*/ 16 && t_value !== (t_value = /*li*/ ctx[20] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (193:20) {#each nowpluhis as li, i}
function create_each_block_1$2(ctx) {
	let if_block_anchor;
	let if_block = /*li*/ ctx[20] != 'downloads' && create_if_block_2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*li*/ ctx[20] != 'downloads') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (209:24) {#if nowplu['id'].includes(nowplugin['id'])}
function create_if_block_1(ctx) {
	let span;
	let t0;
	let t1_value = /*nowplu*/ ctx[17]['version'] + "";
	let t1;

	return {
		c() {
			span = element("span");
			t0 = text("当前版本：");
			t1 = text(t1_value);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*nowpluinfo*/ 1 && t1_value !== (t1_value = /*nowplu*/ ctx[17]['version'] + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (208:20) {#each nowpluinfo as nowplu}
function create_each_block$2(ctx) {
	let show_if = /*nowplu*/ ctx[17]['id'].includes(/*nowplugin*/ ctx[3]['id']);
	let if_block_anchor;
	let if_block = show_if && create_if_block_1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*nowpluinfo, nowplugin*/ 9) show_if = /*nowplu*/ ctx[17]['id'].includes(/*nowplugin*/ ctx[3]['id']);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$2(ctx) {
	let div5;
	let div3;
	let h1;
	let t1;
	let div0;
	let input;
	let t2;
	let div1;
	let t3;
	let t4_value = /*plulist*/ ctx[1].length + "";
	let t4;
	let t5;
	let t6;
	let div2;
	let t7;
	let div4;
	let mounted;
	let dispose;
	let each_value_2 = /*plulist*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
	}

	function select_block_type_1(ctx, dirty) {
		if (/*nowplugin*/ ctx[3]) return create_if_block$1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div5 = element("div");
			div3 = element("div");
			h1 = element("h1");
			h1.textContent = "插件管理";
			t1 = space();
			div0 = element("div");
			input = element("input");
			t2 = space();
			div1 = element("div");
			t3 = text("当前一共");
			t4 = text(t4_value);
			t5 = text("个插件");
			t6 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			div4 = element("div");
			if_block.c();
			attr(input, "type", "text");
			attr(input, "placeholder", "搜索插件");
			attr(div1, "class", "community-plugin-search-summary svelte-14mf2xp");
			attr(div2, "class", "community-plugin-search-results svelte-14mf2xp");
			attr(div3, "class", "community-plugin-search svelte-14mf2xp");
			attr(div4, "class", "community-plugin-details svelte-14mf2xp");
			attr(div4, "id", "show");
			attr(div5, "class", "community-plugin svelte-14mf2xp");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div3);
			append(div3, h1);
			append(div3, t1);
			append(div3, div0);
			append(div0, input);
			set_input_value(input, /*pluname*/ ctx[6]);
			append(div3, t2);
			append(div3, div1);
			append(div1, t3);
			append(div1, t4);
			append(div1, t5);
			append(div3, t6);
			append(div3, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append(div5, t7);
			append(div5, div4);
			if_block.m(div4, null);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[12]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*pluname*/ 64 && input.value !== /*pluname*/ ctx[6]) {
				set_input_value(input, /*pluname*/ ctx[6]);
			}

			if (dirty & /*plulist*/ 2 && t4_value !== (t4_value = /*plulist*/ ctx[1].length + "")) set_data(t4, t4_value);

			if (dirty & /*changeText, plulist, pluhistory, nowpluinfo, pluname*/ 199) {
				each_value_2 = /*plulist*/ ctx[1];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div4, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			destroy_each(each_blocks, detaching);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// 值改变后的函数
function remindMeLater() {
	
} // console.log(selectedIndex)

function instance$2($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let { plulist } = $$props;
	let { pluhistory } = $$props;
	let { nowpluinfo } = $$props;
	let { bashpath } = $$props;
	let showtext = "test";
	let nowplugin; // 现在点击的插件
	let nowpluhis = [];
	let selectedIndex = -1;
	let pluname = '';

	// <!--更改右边的内容-->
	function changeText(tts) {
		return __awaiter(this, void 0, void 0, function* () {
			// console.log(tts)
			$$invalidate(3, nowplugin = tts);

			// showtext = ts['description']
			showtext = 'downloads ';

			showtext += '---';
			showtext += pluhistory[nowplugin['id']]['downloads'];
			$$invalidate(4, nowpluhis = []);

			Object.keys(pluhistory[nowplugin['id']]).forEach(key => {
				// console.log(key, pluhistory[nowplugin][key]);
				nowpluhis.push(key);
			});

			// 设置版本号
			$$invalidate(5, selectedIndex = -1);

			for (let pl of nowpluinfo) {
				if (pl['id'] == nowplugin['id']) {
					for (let i in nowpluhis) {
						if (nowpluhis[i] == pl['version']) {
							$$invalidate(5, selectedIndex = i);
						}
					}
				}
			}
		}); // console.log("test",  await getNowPlugin())
	}

	function install_plugin() {
		return __awaiter(this, void 0, void 0, function* () {
			// console.log('sel num', selectedIndex)
			// console.log(nowplugin)
			// console.log(nowpluhis[selectedIndex])
			// 
			let valut = new obsidian.Vault();

			let filesys = new obsidian.FileSystemAdapter('.');

			// 创建插件目录 
			let plupath = bashpath + '\\' + valut.configDir + '\\plugins\\' + nowplugin['id'];

			// 创建插件目录
			filesys.mkdir(plupath);

			let sdata0 = GetFileFromGitee(nowplugin['gitee'].split('.git')[0], nowplugin['repo'].split('/')[1], nowpluhis[selectedIndex], 'manifest.json');
			filesys.write(plupath + "/manifest.json", yield sdata0);
			let sdata1 = GetFileFromGitee(nowplugin['gitee'].split('.git')[0], nowplugin['repo'].split('/')[1], nowpluhis[selectedIndex], 'manifest.json');
			filesys.write(plupath + "/main.js", yield sdata1);
			let sdata2 = GetFileFromGitee(nowplugin['gitee'].split('.git')[0], nowplugin['repo'].split('/')[1], nowpluhis[selectedIndex], 'manifest.json');
			filesys.write(plupath + "/styles.css", yield sdata2);
			yield getNowPlugin();
		});
	}

	function delete_plugin() {
		return __awaiter(this, void 0, void 0, function* () {
			let valut = new obsidian.Vault();
			let filesys = new obsidian.FileSystemAdapter('.');

			// 创建插件目录 
			let plupath = bashpath + '\\' + valut.configDir + '\\plugins\\' + nowplugin['id'];

			// 创建插件目录
			filesys.rmdir(plupath, true);

			new obsidian.Notice(nowplugin['name'] + 'Delete Success');
			yield getNowPlugin();
		});
	}

	// 获取当前安装插件的信息
	function getNowPlugin() {
		return __awaiter(this, void 0, void 0, function* () {
			let valut = new obsidian.Vault();
			let filesys = new obsidian.FileSystemAdapter('.');
			let libpath = (yield filesys.list(bashpath + '\\' + valut.configDir + '\\plugins')).folders;
			let thisplulist = [];

			for (let i in libpath) {
				// 获取所有插件版本信息
				// 判断文件是否存在
				if (yield filesys.exists(libpath[i] + '\\manifest.json', true)) {
					let filedata = yield filesys.read(libpath[i] + '\\manifest.json');
					let tmp = JSON.parse(filedata);
					thisplulist.push(tmp);
				}
			}

			$$invalidate(0, nowpluinfo = thisplulist);
			return thisplulist;
		});
	}

	function input_input_handler() {
		pluname = this.value;
		$$invalidate(6, pluname);
	}

	function select_change_handler() {
		selectedIndex = select_value(this);
		$$invalidate(5, selectedIndex);
	}

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(10, name = $$props.name);
		if ('plulist' in $$props) $$invalidate(1, plulist = $$props.plulist);
		if ('pluhistory' in $$props) $$invalidate(2, pluhistory = $$props.pluhistory);
		if ('nowpluinfo' in $$props) $$invalidate(0, nowpluinfo = $$props.nowpluinfo);
		if ('bashpath' in $$props) $$invalidate(11, bashpath = $$props.bashpath);
	};

	return [
		nowpluinfo,
		plulist,
		pluhistory,
		nowplugin,
		nowpluhis,
		selectedIndex,
		pluname,
		changeText,
		install_plugin,
		delete_plugin,
		name,
		bashpath,
		input_input_handler,
		select_change_handler
	];
}

class PluShow extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2,
			create_fragment$2,
			safe_not_equal,
			{
				name: 10,
				plulist: 1,
				pluhistory: 2,
				nowpluinfo: 0,
				bashpath: 11
			},
			add_css$2
		);
	}
}

/* src\ui\Themes.svelte generated by Svelte v3.42.4 */

function add_css$1(target) {
	append_styles(target, "svelte-1uu5icx", ".modal-button-container.svelte-1uu5icx{margin-top:30px;text-align:center}.community-theme-screenshot.svelte-1uu5icx{max-width:200px;height:auto;cursor:pointer}.text-class.svelte-1uu5icx{text-align:center}.community-theme-title.svelte-1uu5icx{text-align:center;font-weight:bold}button.mod-cta.svelte-1uu5icx{background-color:var(--interactive-accent);color:var(--text-on-accent)}.theme-list.svelte-1uu5icx{display:flex;flex-wrap:wrap;justify-content:center}.community-theme.svelte-1uu5icx{width:50%;max-width:260px;padding:15px 10px;background:var(--background-secondary-alt);margin:15px 10px;border-radius:10px;display:flex;flex-direction:column;align-items:center;position:relative}");
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (57:16) {#if nthe.split('/')[nthe.split('/').length - 1].includes(the['name'])}
function create_if_block(ctx) {
	let div2;
	let div0;
	let t0_value = /*the*/ ctx[7]['name'] + "";
	let t0;
	let t1;
	let img;
	let img_src_value;
	let t2;
	let div1;
	let button;
	let t3;
	let button_name_value;
	let t4;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			img = element("img");
			t2 = space();
			div1 = element("div");
			button = element("button");
			t3 = text("删除");
			t4 = space();
			attr(div0, "class", "community-theme-title svelte-1uu5icx");
			attr(img, "class", "community-theme-screenshot svelte-1uu5icx");
			if (!src_url_equal(img.src, img_src_value = "https://gitee.com/whghcyx/obsidian-theme/raw/master/" + /*the*/ ctx[7]["repo"].split('/')[1] + "/themeshow." + /*the*/ ctx[7]["screenshot"].split(".")[/*the*/ ctx[7]["screenshot"].split(".").length - 1])) attr(img, "src", img_src_value);
			attr(button, "class", "mod-cta svelte-1uu5icx");
			attr(button, "name", button_name_value = /*the*/ ctx[7]['name']);
			attr(div1, "class", "modal-button-container svelte-1uu5icx");
			attr(div2, "class", "community-theme svelte-1uu5icx");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, img);
			append(div2, t2);
			append(div2, div1);
			append(div1, button);
			append(button, t3);
			append(div2, t4);

			if (!mounted) {
				dispose = listen(button, "click", function () {
					if (is_function(/*delete_theme*/ ctx[3](/*the*/ ctx[7]['name'], /*the*/ ctx[7]['repo'].split('/')[1]))) /*delete_theme*/ ctx[3](/*the*/ ctx[7]['name'], /*the*/ ctx[7]['repo'].split('/')[1]).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*themelist*/ 2 && t0_value !== (t0_value = /*the*/ ctx[7]['name'] + "")) set_data(t0, t0_value);

			if (dirty & /*themelist*/ 2 && !src_url_equal(img.src, img_src_value = "https://gitee.com/whghcyx/obsidian-theme/raw/master/" + /*the*/ ctx[7]["repo"].split('/')[1] + "/themeshow." + /*the*/ ctx[7]["screenshot"].split(".")[/*the*/ ctx[7]["screenshot"].split(".").length - 1])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*themelist*/ 2 && button_name_value !== (button_name_value = /*the*/ ctx[7]['name'])) {
				attr(button, "name", button_name_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			mounted = false;
			dispose();
		}
	};
}

// (56:12) {#each themelist as the}
function create_each_block_2(ctx) {
	let show_if = /*nthe*/ ctx[10].split('/')[/*nthe*/ ctx[10].split('/').length - 1].includes(/*the*/ ctx[7]['name']);
	let if_block_anchor;
	let if_block = show_if && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*nowthemelist, themelist*/ 3) show_if = /*nthe*/ ctx[10].split('/')[/*nthe*/ ctx[10].split('/').length - 1].includes(/*the*/ ctx[7]['name']);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (54:12) {#each nowthemelist as nthe}
function create_each_block_1$1(ctx) {
	let each_1_anchor;
	let each_value_2 = /*themelist*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*themelist, delete_theme, nowthemelist*/ 11) {
				each_value_2 = /*themelist*/ ctx[1];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (80:12) {#each themelist as the}
function create_each_block$1(ctx) {
	let div2;
	let div0;
	let t0_value = /*the*/ ctx[7]['name'] + "";
	let t0;
	let t1;
	let img;
	let img_src_value;
	let t2;
	let div1;
	let button;
	let t3;
	let button_name_value;
	let t4;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			img = element("img");
			t2 = space();
			div1 = element("div");
			button = element("button");
			t3 = text("使用");
			t4 = space();
			attr(div0, "class", "community-theme-title svelte-1uu5icx");
			attr(img, "class", "community-theme-screenshot svelte-1uu5icx");
			if (!src_url_equal(img.src, img_src_value = "https://gitee.com/whghcyx/obsidian-theme/raw/master/" + /*the*/ ctx[7]["repo"].split('/')[1] + "/themeshow." + /*the*/ ctx[7]["screenshot"].split(".")[/*the*/ ctx[7]["screenshot"].split(".").length - 1])) attr(img, "src", img_src_value);
			attr(button, "class", "mod-cta svelte-1uu5icx");
			attr(button, "name", button_name_value = /*the*/ ctx[7]['name']);
			attr(div1, "class", "modal-button-container svelte-1uu5icx");
			attr(div2, "class", "community-theme svelte-1uu5icx");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, img);
			append(div2, t2);
			append(div2, div1);
			append(div1, button);
			append(button, t3);
			append(div2, t4);

			if (!mounted) {
				dispose = listen(button, "click", function () {
					if (is_function(/*install_plugin*/ ctx[2](/*the*/ ctx[7]['name'], /*the*/ ctx[7]['repo'].split('/')[1]))) /*install_plugin*/ ctx[2](/*the*/ ctx[7]['name'], /*the*/ ctx[7]['repo'].split('/')[1]).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*themelist*/ 2 && t0_value !== (t0_value = /*the*/ ctx[7]['name'] + "")) set_data(t0, t0_value);

			if (dirty & /*themelist*/ 2 && !src_url_equal(img.src, img_src_value = "https://gitee.com/whghcyx/obsidian-theme/raw/master/" + /*the*/ ctx[7]["repo"].split('/')[1] + "/themeshow." + /*the*/ ctx[7]["screenshot"].split(".")[/*the*/ ctx[7]["screenshot"].split(".").length - 1])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*themelist*/ 2 && button_name_value !== (button_name_value = /*the*/ ctx[7]['name'])) {
				attr(button, "name", button_name_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$1(ctx) {
	let div4;
	let div1;
	let h20;
	let t1;
	let div0;
	let t2;
	let div3;
	let h21;
	let t4;
	let div2;
	let each_value_1 = /*nowthemelist*/ ctx[0];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	let each_value = /*themelist*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			div4 = element("div");
			div1 = element("div");
			h20 = element("h2");
			h20.textContent = "已经安装主题";
			t1 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			div3 = element("div");
			h21 = element("h2");
			h21.textContent = "社区主题";
			t4 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h20, "class", "text-class svelte-1uu5icx");
			attr(div0, "class", "theme-list svelte-1uu5icx");
			attr(h21, "class", "text-class svelte-1uu5icx");
			attr(div2, "class", "theme-list svelte-1uu5icx");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div1);
			append(div1, h20);
			append(div1, t1);
			append(div1, div0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			append(div4, t2);
			append(div4, div3);
			append(div3, h21);
			append(div3, t4);
			append(div3, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*themelist, delete_theme, nowthemelist*/ 11) {
				each_value_1 = /*nowthemelist*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1$1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*themelist, install_plugin*/ 6) {
				each_value = /*themelist*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div4);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { themelist } = $$props;
	let { nowthemelist } = $$props;
	let { name } = $$props;
	let { bashpath } = $$props;

	function install_plugin(name, path) {
		return __awaiter(this, void 0, void 0, function* () {
			// console.log(name)
			let valut = new obsidian.Vault();

			let filesys = new obsidian.FileSystemAdapter('.');

			// 创建插件目录 
			let plupath = bashpath + '\\' + valut.configDir + '\\themes';

			// 创建插件目录
			filesys.mkdir(plupath);

			for (let i in themelist) {
				if (name == themelist[i]['name']) {
					let sdata0 = GetThemeFromGitee(themelist[i]['gitee'], themelist[i]['repo'].split('/')[1], name + '.css');
					filesys.write(plupath + "/" + name + ".css", yield sdata0);
				}
			}

			yield getNowTheme();
		});
	}

	function delete_theme(name) {
		return __awaiter(this, void 0, void 0, function* () {
			// console.log(name)
			let valut = new obsidian.Vault();

			let filesys = new obsidian.FileSystemAdapter('.');

			// 创建插件目录 
			let plupath = bashpath + '\\' + valut.configDir + '\\themes\\' + name + '.css';

			filesys.remove(plupath);
			yield getNowTheme();
		});
	}

	function getNowTheme() {
		return __awaiter(this, void 0, void 0, function* () {
			let valut = new obsidian.Vault();
			let filesys = new obsidian.FileSystemAdapter('.');
			let libpath = (yield filesys.list(bashpath + '\\' + valut.configDir + '\\themes')).files;
			$$invalidate(0, nowthemelist = libpath);
		}); // console.log(nowthemelist)
	}

	$$self.$$set = $$props => {
		if ('themelist' in $$props) $$invalidate(1, themelist = $$props.themelist);
		if ('nowthemelist' in $$props) $$invalidate(0, nowthemelist = $$props.nowthemelist);
		if ('name' in $$props) $$invalidate(4, name = $$props.name);
		if ('bashpath' in $$props) $$invalidate(5, bashpath = $$props.bashpath);
	};

	return [nowthemelist, themelist, install_plugin, delete_theme, name, bashpath];
}

class Themes extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				themelist: 1,
				nowthemelist: 0,
				name: 4,
				bashpath: 5
			},
			add_css$1
		);
	}
}

/* src\ui\CSSView.svelte generated by Svelte v3.42.4 */

function add_css(target) {
	append_styles(target, "svelte-11smlrl", ".modal-button-container.svelte-11smlrl{margin-top:30px;text-align:center}.community-theme-screenshot.svelte-11smlrl{max-width:200px;height:auto;cursor:pointer}.text-class.svelte-11smlrl{text-align:center}.community-theme-title.svelte-11smlrl{text-align:center;font-weight:bold}button.mod-cta.svelte-11smlrl{background-color:var(--interactive-accent);color:var(--text-on-accent)}.theme-list.svelte-11smlrl{display:flex;flex-wrap:wrap;justify-content:center}.community-theme.svelte-11smlrl{width:50%;max-width:260px;padding:15px 10px;background:var(--background-secondary-alt);margin:15px 10px;border-radius:10px;display:flex;flex-direction:column;align-items:center;position:relative}");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (43:12) {#each nowsnilist as nlist}
function create_each_block_1(ctx) {
	let div;
	let t_value = /*nlist*/ ctx[8].split('/')[/*nlist*/ ctx[8].split('/').length - 1] + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*nowsnilist*/ 1 && t_value !== (t_value = /*nlist*/ ctx[8].split('/')[/*nlist*/ ctx[8].split('/').length - 1] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (52:12) {#each snippetlist as sni}
function create_each_block(ctx) {
	let div3;
	let div0;
	let t0_value = /*sni*/ ctx[5]['name'] + "";
	let t0;
	let t1;
	let div1;
	let t2_value = /*sni*/ ctx[5]['description'] + "";
	let t2;
	let t3;
	let img;
	let img_src_value;
	let t4;
	let div2;
	let button;
	let t5;
	let button_name_value;
	let t6;
	let mounted;
	let dispose;

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			img = element("img");
			t4 = space();
			div2 = element("div");
			button = element("button");
			t5 = text("使用");
			t6 = space();
			attr(div0, "class", "community-theme-title svelte-11smlrl");
			attr(img, "class", "community-theme-screenshot svelte-11smlrl");
			if (!src_url_equal(img.src, img_src_value = "https://gitee.com/whghcyx/obsidian-snippet/raw/master/" + /*sni*/ ctx[5]["repo"] + "/" + /*sni*/ ctx[5]["screenshot"])) attr(img, "src", img_src_value);
			attr(button, "class", "mod-cta svelte-11smlrl");
			attr(button, "name", button_name_value = /*sni*/ ctx[5]['name']);
			attr(div2, "class", "modal-button-container svelte-11smlrl");
			attr(div3, "class", "community-theme svelte-11smlrl");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div0, t0);
			append(div3, t1);
			append(div3, div1);
			append(div1, t2);
			append(div3, t3);
			append(div3, img);
			append(div3, t4);
			append(div3, div2);
			append(div2, button);
			append(button, t5);
			append(div3, t6);

			if (!mounted) {
				dispose = listen(button, "click", function () {
					if (is_function(/*install_plugin*/ ctx[2](/*sni*/ ctx[5]['name'], /*sni*/ ctx[5]['repo']))) /*install_plugin*/ ctx[2](/*sni*/ ctx[5]['name'], /*sni*/ ctx[5]['repo']).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*snippetlist*/ 2 && t0_value !== (t0_value = /*sni*/ ctx[5]['name'] + "")) set_data(t0, t0_value);
			if (dirty & /*snippetlist*/ 2 && t2_value !== (t2_value = /*sni*/ ctx[5]['description'] + "")) set_data(t2, t2_value);

			if (dirty & /*snippetlist*/ 2 && !src_url_equal(img.src, img_src_value = "https://gitee.com/whghcyx/obsidian-snippet/raw/master/" + /*sni*/ ctx[5]["repo"] + "/" + /*sni*/ ctx[5]["screenshot"])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*snippetlist*/ 2 && button_name_value !== (button_name_value = /*sni*/ ctx[5]['name'])) {
				attr(button, "name", button_name_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div3);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let div1;
	let h20;
	let t1;
	let div0;
	let t2;
	let div3;
	let h21;
	let t4;
	let div2;
	let each_value_1 = /*nowsnilist*/ ctx[0];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*snippetlist*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div4 = element("div");
			div1 = element("div");
			h20 = element("h2");
			h20.textContent = "已经安装CSS";
			t1 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			div3 = element("div");
			h21 = element("h2");
			h21.textContent = "社区CSS样式";
			t4 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h20, "class", "text-class svelte-11smlrl");
			attr(h21, "class", "text-class svelte-11smlrl");
			attr(div2, "class", "theme-list svelte-11smlrl");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div1);
			append(div1, h20);
			append(div1, t1);
			append(div1, div0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			append(div4, t2);
			append(div4, div3);
			append(div3, h21);
			append(div3, t4);
			append(div3, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*nowsnilist*/ 1) {
				each_value_1 = /*nowsnilist*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*snippetlist, install_plugin*/ 6) {
				each_value = /*snippetlist*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div4);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let { snippetlist } = $$props;
	let { nowsnilist } = $$props;

	function install_plugin(name, path) {
		return __awaiter(this, void 0, void 0, function* () {
			// console.log(name)
			let valut = new obsidian.Vault();

			let filesys = new obsidian.FileSystemAdapter('.');

			// 创建插件目录 
			let plupath = bashpath + '\\' + valut.configDir + '\\themes';

			// 创建插件目录
			filesys.mkdir(plupath);

			for (let i in snippetlist) {
				if (name == themelist[i]['name']) {
					let sdata0 = GetThemeFromGitee(themelist[i]['gitee'], themelist[i]['repo'].split('/')[1], name + '.css');
					filesys.write(plupath + "/" + name + ".css", yield sdata0);
				}
			}

			yield getNowTheme();
		}); // console.log(tmp)
	}

	function getNowTheme() {
		return __awaiter(this, void 0, void 0, function* () {
			let valut = new obsidian.Vault();
			let filesys = new obsidian.FileSystemAdapter('.');
			let libpath = (yield filesys.list(bashpath + '\\' + valut.configDir + '\\snippets')).files;
			$$invalidate(0, nowsnilist = libpath);
		}); // console.log(nowsnilist)
	}

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(3, name = $$props.name);
		if ('snippetlist' in $$props) $$invalidate(1, snippetlist = $$props.snippetlist);
		if ('nowsnilist' in $$props) $$invalidate(0, nowsnilist = $$props.nowsnilist);
	};

	return [nowsnilist, snippetlist, install_plugin, name];
}

class CSSView extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { name: 3, snippetlist: 1, nowsnilist: 0 }, add_css);
	}
}

// 插件默认设置
const DEFAULT_SETTINGS = {
    mySetting: 'default'
};
// 插件主要功能
class MyPlugin extends obsidian.Plugin {
    constructor(app, manifest) {
        super(app, manifest);
        this.thisplulist = [];
    }
    // 插件重载
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin');
            yield this.loadSettings();
            this.thememodel = new ThemesModal(this.app);
            this.cssmodel = new CSSModal(this.app);
            this.pluginmodel = new SampleModal(this.app);
            this.addCommand({
                id: 'open-sample-modal',
                name: 'Open Sample Modal',
                // callback: () => {
                // 	console.log('Simple Callback');
                // },
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (leaf) {
                        if (!checking) {
                            // new SampleModal(this.app, this.thisplulist, this).open();
                            // this.cssmodel.open();
                            this.pluginmodel.open();
                        }
                        return true;
                    }
                    return false;
                }
            });
            // 界面---设置界面
            this.addSettingTab(new SampleSettingTab(this.app, this));
            // 编辑界面
            // this.registerCodeMirror((cm: CodeMirror.Editor) => {
            // 	console.log('codemirror', cm);
            // });
        });
    }
    onunload() {
        console.log('unloading plugin');
    }
    // 导入配置
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    // 保存配置
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
// 主题的界面
class ThemesModal extends obsidian.Modal {
    constructor(app) {
        super(app);
    }
    getNowTheme() {
        return __awaiter(this, void 0, void 0, function* () {
            let configdir = this.app.vault.configDir;
            let libpath = (yield this.app.vault.adapter.list(configdir + '//themes')).files;
            return libpath;
        });
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            const themelist = yield GetGiteeThemeList();
            let nowthemelist = yield this.getNowTheme();
            // console.log('theme', themelist)
            let { contentEl } = this;
            this.view = new Themes({
                target: contentEl,
                props: {
                    themelist: themelist,
                    nowthemelist: nowthemelist,
                    bashpath: this.app.vault.adapter.basePath,
                    name: 'test',
                }
            });
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
// CSS样式的界面
class CSSModal extends obsidian.Modal {
    constructor(app) {
        super(app);
    }
    getNowTheme() {
        return __awaiter(this, void 0, void 0, function* () {
            let configdir = this.app.vault.configDir;
            let libpath = (yield this.app.vault.adapter.list(configdir + '//snippets')).files;
            return libpath;
        });
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            let snippetlist = yield GetGiteeSnippetList();
            let nowsnilist = yield this.getNowTheme();
            // console.log('css', snippetlist)
            let { contentEl } = this;
            this.view = new CSSView({
                target: contentEl,
                props: {
                    name: 'css',
                    snippetlist: snippetlist,
                    bashpath: this.app.vault.adapter.basePath,
                    nowsnilist: nowsnilist,
                }
            });
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
// 插件的界面
class SampleModal extends obsidian.Modal {
    constructor(app) {
        super(app);
        this.app = app;
    }
    get_plu_list() {
        return __awaiter(this, void 0, void 0, function* () {
            let configdir = this.app.vault.configDir;
            let libpath = (yield this.app.vault.adapter.list(configdir + '//plugins')).folders;
            this.nowpluinfo = [];
            for (let i in libpath) {
                // 获取所有插件版本信息
                if (yield this.app.vault.adapter.exists(libpath[i] + '\\manifest.json', true)) {
                    let filedata = (yield this.app.vault.adapter.read(libpath[i] + '\\manifest.json'));
                    let tmp = JSON.parse(filedata);
                    this.nowpluinfo.push(tmp);
                }
            }
            return this.nowpluinfo;
        });
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            // let {contentEl} = this;
            // contentEl.setText('Woah!');
            const pluginlist = yield GetGiteePluginList();
            // console.log(pluginlist)
            const pluginhistory = yield GetGiteePluginHistory();
            // console.log(pluginhistory, typeof pluginhistory)
            yield this.get_plu_list();
            let { contentEl } = this;
            this.view = new PluShow({
                target: contentEl,
                props: {
                    plulist: pluginlist,
                    pluhistory: pluginhistory,
                    nowpluinfo: this.nowpluinfo,
                    bashpath: this.app.vault.adapter.basePath
                }
            });
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
class SampleSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: '资源库' });
        // new Setting(containerEl)
        // 	.setName('Setting #1')
        // 	.setDesc('It\'s a secret')
        // 	.addText(text => text
        // 		.setPlaceholder('Enter your secret')
        // 		.setValue('')
        // 		.onChange(async (value) => {
        // 			console.log('Secret: ' + value);
        // 			this.plugin.settings.mySetting = value;
        // 			await this.plugin.saveSettings();
        // 		}));
        new obsidian.Setting(containerEl)
            .setName("插件市场")
            .setDesc("国内下载插件的地方")
            .addButton(cb => {
            cb.setButtonText("插件库");
            cb.setCta();
            cb.onClick(() => {
                this.plugin.pluginmodel.open();
            });
        });
        new obsidian.Setting(containerEl)
            .setName("主题市场")
            .setDesc("下载各种主题的地方")
            .addButton(cb => {
            cb.setButtonText("主题库");
            cb.setCta();
            cb.onClick(() => {
                this.plugin.thememodel.open();
            });
        });
        new obsidian.Setting(containerEl)
            .setName("CSS市场")
            .setDesc("分享各种样式的CSS")
            .addButton(cb => {
            cb.setButtonText("CSS库");
            cb.setCta();
            cb.onClick(() => {
                this.plugin.cssmodel.open();
            });
        });
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
